#!/bin/sh

#
# Liam Powell's Linux kernel download tool
# Created and developed by Liam Powell (gfelipe099)
# lp-lkdt file
# For Debian GNU/Linux 10 (buster) amd64
#

pkgs="dwarves flex bison fakeroot libssl-dev libelf-dev bc rsync build-essential"
kernelBranch="v5.x"
linuxVersion="5.4.99"
downloadUrl="https://mirrors.edge.kernel.org/pub/linux/kernel/${kernelBranch}/linux-${linuxVersion}.tar.gz"
mainDir="/root/.cache/lp-lkdt/"
srcDir="/root/.cache/lp-lkdt/src/"
debDir="/root/.cache/lp-lkdt/deb/"

if [ "$(whoami)" != root ]; then
    echo "--> You must execute this script as root."
    exit
fi

clear
echo "Please wait..."
apt-get install -yy figlet > /dev/null 2>&1
clear
figlet -c "Liam Powell's"
figlet -c "LKDT"
apt-get purge -yy figlet --autoremove > /dev/null 2>&1
echo "Welcome to Liam Powell's Linux kernel download tool"
echo "Created and developed by Liam Powell (gfelipe099)"
echo "Kernel version in use: $(uname -r)" && echo ""

if [ ! -d ${mainDir} ] > /dev/null 2>&1; then
    echo "--> Main directory ${mainDir} not found, creating it..."
    mkdir -p ${mainDir}
    if [ ! -f ${mainDir}main.conf ]; then
        echo "--> WARNING: ${mainDir}main.conf: Configuration file not found."
        echo "    Default settings were loaded." && echo ""
        read -p "    Do you want to download and edit the config file? [yes/no]: " configPrompt && echo ""
        if [ ${configPrompt} = "yes" ]; then
            echo "--> Downloading configuration file from the repository..."
            curl -sL https://raw.githubusercontent.com/gfelipe099/bash-utils/main/conf/lp-lkdt/main.conf.example > ${mainDir}main.conf
            if [ -f ${mainDir}main.conf ]; then
                if [ -x /usr/bin/nano ]; then
                    availableEditor="nano"
                elif [ -x /usr/bin/vi ]; then
                    availableEditor="vi"
                elif [ -x /usr/bin/vim ]; then
                    availableEditor="nano"
                fi
                echo "    Opening ${availableEditor} text editor..." && echo ""
                sleep 3
                ${availableEditor} ${mainDir}main.conf
                else
                    echo "    No config file will downloaded neither used"
            fi
        elif [ ${configPrompt} = "no" ]; then
            echo "    No custom config file will downloaded neither used" && echo ""
            else
                echo "    No custom config file will downloaded neither used" && echo ""
        fi
    fi
fi

if [ -d ${mainDir} ]; then
    if [ -f ${mainDir}main.conf ]; then
        read -p "--> Use the config file? [yes/no]: " useConfigFile
        if [ ${useConfigFile} = "yes" ]; then
            . ${mainDir}main.conf
            if [ -z ${pkgs} ]; then
                pkgs="dwarves flex bison fakeroot libssl-dev libelf-dev bc rsync build-essential"
            elif [ -z ${kernelBranch} ]; then
                kernelBranch="v5.x"
            elif [ -z ${linuxVersion} ]; then
                linuxVersion="5.4.99"
            elif [ -z ${downloadUrl} ]; then
                downloadUrl="https://mirrors.edge.kernel.org/pub/linux/kernel/${kernelBranch}/linux-${linuxVersion}.tar.gz"
            elif [ -z ${mainDir} ]; then
                mainDir="/root/.cache/lp-lkdt/"
            elif [ -z ${srcDir} ]; then
                srcDir="/root/.cache/lp-lkdt/src/"
            elif [ -z ${debDir} ]; then
                debDir="/root/.cache/lp-lkdt/deb/"
            fi
            echo "    The config file was loaded successfully" && echo ""
            else
                echo "    There was no config file loaded! Exiting..." && echo ""
                exit
        fi
    fi
fi

# verify Debian GNU/Linux is running
if [ ! -f /usr/bin/apt ]; then
    echo "--> APT Package Manager was not found in this system, execution aborted."
    exit
    else
        apt-get install -yy lsb-release > /dev/null 2>&1
        os=$(lsb_release -ds | sed 's/"//g')
        validatedOs="Debian GNU/Linux 10 (buster)"
fi
if [ "${os}" != "${validatedOs}" ]; then
    echo "--> You must be using ${validatedOs} to execute this script."
    exit 2
fi

if [ -z ${1} ]; then
    echo "--> You must specify an argument: download, install, uninstall, clean"
    exit
elif [ ${1} = "download" ]; then
    if [ ! -d ${srcDir} ]; then
        echo "--> Source directory ${srcDir} not found, creating it..."
        mkdir -p ${srcDir}
    fi
    echo "--> Installing dependencies..."
    apt-get install -y ${pkgs} > /dev/null 2>&1

    if [ -f ${srcDir}linux-${linuxVersion}.tar.gz ]; then
        echo "--> Not downloading the Linux kernel again, since it already exists"
        else
            echo "--> Downloading Linux kernel source..."
            curl -sL ${downloadUrl} > ${srcDir}linux-${linuxVersion}.tar.gz

            echo "--> Extracting Linux kernel source..."
            tar xf ${srcDir}linux-${linuxVersion}.tar.gz -C ${srcDir}
    fi

    if [ -f ${srcDir}linux-${linuxVersion}/.config ]; then
        echo "--> A Linux kernel config file already exists"
        read -p "    Delete and copy the file again? [yes/no]: " copyKernelConfigFileAgain
        if [ -z ${copyKernelConfigFileAgain} ]; then
            echo "        The config file was not deleted"
        elif [ "${copyKernelConfigFileAgain}" = "yes" ]; then
            echo "        Deleting kernel config file..."
            rm ${srcDir}linux-${linuxVersion}/.config
            echo "        Copying kernel configuration file from this system..."
            cp /boot/config-$(uname -r) ${srcDir}linux-${linuxVersion}/.config
            else
                echo "        The config file was not deleted"
        fi
        else
            echo "--> Copying kernel configuration file from this system..."
            cp /boot/config-$(uname -r) ${srcDir}linux-${linuxVersion}/.config
    fi

elif [ ${1} = "compile" ]; then
    if [ ! -d ${debDir} ]; then
        echo "--> deb directory ${debDir} not found, creating it..."
        mkdir -pv ${debDir}
    fi
    if [ ! -d ${srcDir}linux-${linuxVersion} ]; then
        echo "--> ERROR: ${1}: The directory ${srcdir}linux-${linuxVersion} was not found: The kernel source file has not been extracted yet."
        exit
        else
            echo "--> Compiling kernel and building deb packages (this will take some time)..."
            cd ${srcDir}linux-${linuxVersion}
            make clean
            make localmodconfig -j$(nproc) bindeb-pkg
            mv ${srcDir}*.deb ${debDir}
            echo "    Kernel compilation done, now you can install it using the argument: install"
    fi
    exit
elif [ ${1} = "install" ]; then
    if [ ! -f ${debDir}linux-image-${linuxVersion}.deb ]; then
        echo "--> ERROR: ${1}: ${debDir}linux-image-${linuxVersion}.deb: No such file or directory"
        echo "    Did you compile the kernel first?"
        exit
    elif [ ! -f ${debDir}linux-headers-${linuxVersion}.deb ]; then
        echo "--> ERROR: ${1}: ${debDir}linux-image-${linuxVersion}.deb: No such file or directory"
        echo "    Did you compile the kernel first?"
        exit
    fi
    echo "--> Installing packages: linux-image-${linuxVersion} linux-headers-${linuxVersion}..."
    dpkg -i ${debDir}linux-image-${linuxVersion}.deb ${debDir}linux-headers-${linuxVersion} > /dev/null 2>&1
    echo "    The packages were installed successfully." && echo ""
    while true; do
        read -p "        Do you want to reboot now? [Y/N]: " input
            case ${input} in
                [Yy]* ) echo "        Rebooting the system..."; sleep 1; reboot; break;;
                [Nn]* ) echo "        The system will not restart"; break;;
                * ) echo "        Please type Y or N and try again.";;
            esac
    done
elif [ ${1} = "uninstall" ]; then
    echo "--> Uninstalling kernel..."
    apt-get purge -yy --autoremove linux-image-${linuxVersion} linux-headers-${linuxVersion}
    exit
elif [ ${1} = "clean" ]; then
    while true; do
        read -p "--> What directory shall be cleaned? [main/src/deb]: " input
            if [ ${input} = "main" ]; then
                echo "    WARNING!!! THIS WILL REMOVE EVERYTHING, INCLUDING ANY COMPILED KERNELS AND CONFIG FILES"
                while true; do
                read -p "        Continue? [Y/N]: " prompt
                    case ${prompt} in
                        [Yy]* ) echo "            Removing directory ${mainDir}..."; sudo rm -rf ${mainDir}; echo "            Directory removed successfully"; exit;;
                        [Nn]* ) echo "            Directory ${mainDir} was not removed"; exit;;
                        * ) echo "            Please answer Y or N and try again";
                    esac
                done
            elif [ ${input} = "src" ]; then
                echo "--> WARNING!!! THIS WILL REMOVE ANY COMPILED KERNELS"
                while true; do
                read -p "    Continue? [Y/N]: " prompt
                    case ${prompt} in
                        [Yy]* ) echo "        Removing directory ${srcDir}..."; sudo rm -rf ${srcDir}; echo "        Directory removed successfully"; exit;;
                        [Nn]* ) echo "        Directory ${srcDir} was not removed"; exit;;
                        * ) echo "        Please answer Y or N and try again";
                    esac
                done
            elif [ ${input} = "deb" ]; then
                echo "--> WARNING!!! THIS WILL REMOVE ANY DEB FILES FROM ALL COMPILED KERNELS"
                while true; do
                read -p "    Continue? [Y/N]: " prompt
                    case ${prompt} in
                        [Yy]* ) echo "        Removing directory ${debDir}..."; sudo rm -rf ${debDir}; echo "        Directory removed successfully"; exit;;
                        [Nn]* ) echo "        Directory ${debDir} was not removed"; exit;;
                        * ) echo "        Please answer Y or N and try again";
                    esac
                done
            elif [ -z ${input} ]; then
                    echo "    ERROR: ${1}: ${input}: Invalid argument, try again with: main, src or deb" && echo ""
            fi
    done
    else
        echo "--> ERROR: ${1}: Invalid argument, try again with: download, install or uninstall"
        exit
fi
